{
  "Competitive": {
    "prefix": ["comp"],
    "body": [
      "#include <iostream>",
      "#include <algorithm>",
      "#include <iterator>",
      "#include <limits>",
      "#include <numeric>",
      "#include <vector>",
      "#include <array>",
      "",
      "using namespace std;",
      "",
      "template <typename T> concept is_container = requires(T a) {",
      "  a.begin();",
      "  a.end();",
      "};",
      "",
      "template <is_container T>requires (!std::same_as<T, std::string>)",
      "std::ostream &operator<<(std::ostream &os, const T &cont) {",
      "  os << '{';",
      "  for (const auto &x : cont) {",
      "    os << x;",
      "    os << ' ';",
      "  }",
      "  os << '}';",
      "  return os;",
      "}",
      "",
      "void printMatrix(const is_container auto &cont) {",
      "  for (const auto &x : cont) {",
      "    cout << x;",
      "    cout << '\\n';",
      "  }",
      "}",
      "",
      "template <typename T, std::size_t... Is>",
      "constexpr std::array<T, sizeof...(Is)>",
      "create_array(T value, std::index_sequence<Is...>) {",
      "  return {{(static_cast<void>(Is), value)...}};",
      "}",
      "",
      "template <std::size_t N, typename T>",
      "constexpr std::array<T, N> create_array(const T &value) {",
      "  return create_array(value, std::make_index_sequence<N>());",
      "}",

      "template <typename T>",
      "constexpr auto accessor(T& t){",
      "  return [&](int i) -> typename T::reference{",
      "    return t.at(i);",
      "  };",
      "}",
      "",
      "template <typename T>",
      "constexpr auto accessor(const T& t){",
      "  return [&](int i){",
      "    return t.at(i);",
      "  };",
      "}",
      "",
      "template <typename T>",
      "constexpr auto const_accessor(T& t){",
      "  return [&](int i){",
      "    return t.at(i);",
      "  };",
      "}",
      "",
      "template <typename T>",
      "constexpr auto matrix_accessor(T& t){",
      "  return [&](int i, int j) -> typename T::value_type::reference{",
      "    return t.at(i).at(j);",
      "  };",
      "}",
      "",
      "template <typename T>",
      "constexpr auto matrix_accessor(const T& t){",
      "  return [&](int i, int j) {",
      "    return t.at(i).at(j);",
      "  };",
      "}",
      "",
      "template <typename T>",
      "constexpr auto const_matrix_accessor(T& t){",
      "  return [&](int i, int j) {",
      "    return t.at(i).at(j);",
      "  };",
      "}",
      "",
      "template <typename T>",
      "using lmt = std::numeric_limits<T>;",
      "",
      "template <typename T, std::size_t N>",
      "constexpr std::size_t array_size(const T (&)[N]) noexcept{",
      "  return N;",
      "}",
      "",
      ""
    ],
    "description": "Code for competitive programming"
  },
  "#define class": {
    "prefix": ["dclass"],
    "body": [
      "#ifndef $1_h",
      "#define $1_h",
      "",
      "class $1 {",
      "};",
      "",
      "#endif"
    ],
    "description": "Code for new class with #defines"
  },
  "main": {
    "prefix": ["main"],
    "body": [
      "int main(){",
      "}"
    ],
    "description": "Plain main"
  },
  "main args": {
    "prefix": ["amain"],
    "body": [
      "int main(int argc, char** argv){",
      "}"
    ],
    "description": "main with argc"
  },
  "competitive includes": {
    "prefix": ["inc"],
    "body": [
      "#include <cmath>",
      "#include <iostream>",
      "#include <limits>",
      "#include <algorithm>",
      "#include <iterator>",
      "#include <limits>",
      "#include <numeric>",
      "#include <vector>",
      "#include <array>",
      "",
      "using namespace std;",
      ""
    ],
    "description": "includes for competitive programming"
  }
}
